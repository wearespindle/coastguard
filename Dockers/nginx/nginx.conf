events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;

        ssl_certificate /etc/ssl/certs/mycert.pem;
        ssl_certificate_key /etc/ssl/private/mykey.key;


        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
        ssl_prefer_server_ciphers       on;

        # The following is all one long line. We use an explicit list of ciphers to enable
        # forward secrecy without exposing ciphers vulnerable to the BEAST attack:
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!CBC:!EDH:!kEDH:!PSK:!SRP:!kECDH:!RC4;

        # We disable ssl_v3 because of poodle:
        ssl_protocols TLSv1.1 TLSv1.2;

        # More hardening:
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 5m;

        client_max_body_size 10m;

        location / {

            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            # Fix the "It appears that your reverse proxy set up is broken" error.
            proxy_pass          http://web:9000;
            proxy_read_timeout  90;
        }
    }
}
